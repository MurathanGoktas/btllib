#!/usr/bin/env python3

import argparse
import os
from os.path import basename, dirname, join, isdir
import subprocess as sp
import shutil
import sys

BUILD_DIR = '__build-compile'
DEFAULT_INSTALL_DIR = 'install'

def get_cli_args():
  # Create parser
  parser = argparse.ArgumentParser(description='Compile btllib.')

  # Add "prefix" argument
  script_dir = dirname(__file__)
  default_install_dir = join(script_dir, DEFAULT_INSTALL_DIR)
  parser.add_argument('--prefix', '-p', type=str, default=default_install_dir, help='Prefix of the installation path.')

  return parser.parse_args()

def program_exists(program):
  return sp.run([ f'command -v {program}' ], shell=True).returncode == 0

def install_temp_deps(venv_path):
  deps = [ 'meson', 'ninja', 'cmake' ]
  missing_deps = []
  build_venv = False
  for dep in deps:
    if not program_exists(dep):
      missing_deps.append(dep)
      build_venv = True
  missing_deps = ' '.join(missing_deps)

  if build_venv:
    print(f'Building virtual environment for missing dependencies: {missing_deps}')

    os.makedirs(f'{os.path.dirname(venv_path)}', exist_ok=True)

    # Create virtual environment
    if isdir(venv_path):
      print(f'Using already existing virtual environment: {venv_path}')
    else:
      sp.run([ f'python3 -m venv {venv_path}' ], shell=True)

    sp.run([ f'''
      source {venv_path}/bin/activate &&
      pip3 install {missing_deps} &&
      deactivate;
    ''' ], shell=True, check=True)

def export_python_flags():
  python3_config = join(sys.exec_prefix, 'bin', 'python3-config')

  # Get python flags
  cflags = sp.run([ f'{python3_config} --cflags' ], shell=True, capture_output=True, check=True, text=True).stdout.strip()
  ldflags = sp.run([ f'{python3_config} --ldflags' ], shell=True, capture_output=True, check=True, text=True).stdout.strip()

  # Print flags
  print(f'Passing the following CFLAGS to Python: {cflags}')
  print(f'Passing the following LDFLAGS to Python: {ldflags}')

  # Export flags
  os.environ['BTLLIB_PYTHON_CFLAGS'] = cflags
  os.environ['BTLLIB_PYTHON_LDFLAGS'] = ldflags

if __name__ == "__main__":
  args = get_cli_args()

  script_dir = dirname(__file__)
  os.chdir(script_dir)

  # Check if previous build dir exists and remove it
  if isdir(BUILD_DIR):
    print(f'Removing previous build dir: {BUILD_DIR}')
    shutil.rmtree(BUILD_DIR, ignore_errors=True)

  venv_path = join(BUILD_DIR, 'venv')
  install_temp_deps(venv_path)

  export_python_flags()

  sp.run([ f'''
    if [[ -f {venv_path}/bin/activate ]]; then
      source {venv_path}/bin/activate;
    fi &&
    meson setup --buildtype release --prefix={args.prefix} {BUILD_DIR} &&
    cd {BUILD_DIR} &&
    ninja install &&
    cd .. &&
    if [[ -f {venv_path}/bin/activate ]]; then
      deactivate;
    fi
  ''' ], shell=True, check=True)