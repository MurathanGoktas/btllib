# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

jobs:

- job: linux
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    submodules: recursive

  - script: |
      set -o errexit -o pipefail
      wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      sudo apt-add-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main"
      sudo apt-get update
      sudo apt-get install --yes --no-install-recommends llvm clang-format-13 clang-tidy-13 clang libomp-dev python3 python3-setuptools openjdk-16-jdk libboost-dev samtools xz-utils bzip2 lrzip

      command -v clang-format >/dev/null
      if [[ $? -eq 0 ]]; then
        clang_format_dir=$(dirname $(which clang-format))
      else
        command -v clang-format-13 >/dev/null
        if [[ $? -eq 0 ]]; then
          clang_format_dir=$(dirname $(which clang-format-13))
        else
          exit -1
        fi
      fi
      sudo ln -sf ${clang_format_dir}/clang-format-13 ${clang_format_dir}/clang-format

      set +o errexit
      which clang-format
      which clang-format-13
      echo "Checking clang-tidy:"
      which clang-tidy
      echo "Checking clang-tidy-13:"
      which clang-tidy-13

      command -v clang-tidy >/dev/null
      if [[ $? -eq 0 ]]; then
        clang_tidy_dir=$(dirname $(which clang-tidy))
      else
        command -v clang-tidy-13 >/dev/null
        if [[ $? -eq 0 ]]; then
          clang_tidy_dir=$(dirname $(which clang-tidy-13))
        else
          exit -1
        fi
      fi
      set -o errexit
      sudo ln -sf ${clang_tidy_dir}/clang-tidy-13 ${clang_tidy_dir}/clang-tidy

      sudo pip3 install ninja meson cmake
    displayName: 'Install required software'

  - script: meson setup build && cd build && ninja
    displayName: 'Build the project'

  - script: cd build && ninja clang-format-check
    displayName: 'Run clang-format'

  - script: cd build && ninja clang-tidy
    displayName: 'Run clang-tidy'

  - script: |
      cd build && meson test --repeat=10
      if [[ $? -ne 0 ]]; then
        cat meson-logs/testlog.txt
        exit 1
      fi
    displayName: 'Run tests'

  - script: |
      cd build && ninja sanitize-undefined
      if [[ $? -ne 0 ]]; then
        cat __build-sanitize-undefined/meson-logs/testlog.txt
        exit 1
      fi
    displayName: 'Sanitize undefined'

  - script: |
      set -o errexit -o pipefail
      ./compile
      cd build && ninja test-wrappers
    displayName: 'Test wrappers'

- job: macos
  pool:
    vmImage: 'macOS-latest'

  steps:
  - checkout: self
    submodules: recursive

  - script: |
      set -o errexit -o pipefail
      brew update
      brew install llvm libomp boost samtools coreutils xz lrzip
      brew tap adoptopenjdk/openjdk
      brew install --cask adoptopenjdk11
      sudo ln -sf $(brew --prefix llvm)/bin/clang-format /usr/local/bin/clang-format
      sudo ln -sf $(brew --prefix llvm)/bin/clang-tidy /usr/local/bin/clang-tidy
      sudo pip3 install ninja meson cmake
    displayName: 'Install required software'

  - script: meson setup build && cd build && ninja
    displayName: 'Build the project'

  - script: cd build && ninja clang-format-check
    displayName: 'Run clang-format'

  - script: cd build && ninja clang-tidy
    displayName: 'Run clang-tidy'

  - script: |
      cd build && meson test --repeat=10
      if [[ $? -ne 0 ]]; then
        cat meson-logs/testlog.txt
        exit 1
      fi
    displayName: 'Run tests'

  - script: |
      cd build && ninja sanitize-undefined
      if [[ $? -ne 0 ]]; then
        cat __build-sanitize-undefined/meson-logs/testlog.txt
        exit 1
      fi
    displayName: 'Sanitize undefined'

  - script: |
      set -o errexit -o pipefail
      ./compile
      cd build && ninja test-wrappers
    displayName: 'Test wrappers'